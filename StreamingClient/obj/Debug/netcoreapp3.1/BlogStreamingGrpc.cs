// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BlogStreaming.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class BlogServer
{
  static readonly string __ServiceName = "BlogServer";

  static readonly grpc::Marshaller<global::Article> __Marshaller_Article = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Article.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

  static readonly grpc::Method<global::Article, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Create = new grpc::Method<global::Article, global::Google.Protobuf.WellKnownTypes.Empty>(
      grpc::MethodType.Unary,
      __ServiceName,
      "Create",
      __Marshaller_Article,
      __Marshaller_google_protobuf_Empty);

  static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Article> __Method_List = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Article>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "List",
      __Marshaller_google_protobuf_Empty,
      __Marshaller_Article);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::BlogStreamingReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of BlogServer</summary>
  [grpc::BindServiceMethod(typeof(BlogServer), "BindService")]
  public abstract partial class BlogServerBase
  {
    public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Create(global::Article request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task List(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::IServerStreamWriter<global::Article> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for BlogServer</summary>
  public partial class BlogServerClient : grpc::ClientBase<BlogServerClient>
  {
    /// <summary>Creates a new client for BlogServer</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public BlogServerClient(grpc::ChannelBase channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for BlogServer that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public BlogServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected BlogServerClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected BlogServerClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::Google.Protobuf.WellKnownTypes.Empty Create(global::Article request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Google.Protobuf.WellKnownTypes.Empty Create(global::Article request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateAsync(global::Article request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateAsync(global::Article request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
    }
    public virtual grpc::AsyncServerStreamingCall<global::Article> List(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncServerStreamingCall<global::Article> List(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_List, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override BlogServerClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new BlogServerClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(BlogServerBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_Create, serviceImpl.Create)
        .AddMethod(__Method_List, serviceImpl.List).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, BlogServerBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Article, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Create));
    serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Article>(serviceImpl.List));
  }

}
#endregion
